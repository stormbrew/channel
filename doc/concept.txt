Channel Language Concept Document
---
This language is a patchwork of several other language's concepts. They are:
- Aesthetics: The idea is to take the premise of Lisp and TCL (everything is a tuple, everything is a string respectively)
     and their ability to have an extremely simple parser. At the same time, have the language look a little more traditional 
     and familiar to users of languages like C and Ruby. Ideally, it'll be possible to do Lisp-style code manipulations and 
     TCL-style DSLs without a lot of extra work.
- Object Model: Pretty much exactly Ruby's. Objects are instances of classes which have metaclasses etc.
- Execution Model: Based, in a way, on PHP. The idea is that the execution environment will allow you to fork the VM state
     (including all object state, stack state, etc. But not external resources) and then throw away that fork. This
     allows for a framework to fork for a request and then terminate the forked handler after the request is done, along
     with all cruft generated in the request. It is essentially a way of short-circuiting the garbage collection of an
     entire request. The forked processes will also resemble Erlang's concept of threading (see threading model below)
- Threading Model: Forked processes will be isolated from each other and message passing (like Erlang's) will be
     the only means to communicate between them.

# Procedural code
function blah(arg1, arg2, arg3) do: { # meta-definition of function: function function name args do do: {...}
	if ($arg1 == $arg2) then: {
		echo("boom")
	} else: {
		echo($arg3)
	}
}

blah(1, 2, 3) # => "boom"
blah(1, 1, 2) # => "2"

# Object code
class Blah define: { # meta-definition of class function: function class name define do: {...}
	function blah(arg1, arg2) do: {
		echo($arg1)
		@tmp = $arg2
	}
	function blorp() do: {
		echo(@tmp)
	}
}
var x = Blah.new
$x.blah("blorp", "bloom") # => "blorp"
$x.blorp() # => "bloom"


# Anonymous functions
var x = proc(arg) do: { echo(arg) }
$x.call("blah") # => "blah"
$x("blah") # => "blah" -- shortcut invocation is only a possibility at this point. Logistics need to be figured out.

All code is tuples
Two kinds of tuples:
- {} tuples are \n separated, intended to be used for code. Only bare, top level returns move to next item though
- () tuples are , separated, intended to be used for lists (including argument lists). Again, only bare, top level commas move to next item.
A 'file' is implicitly within a {} tuple set.
Tuples can be labeled with a symbol + : pair before the start of the tuple.
All control structures done through blocks. Unlike ruby, trivial to pass multiple blocks to function via labelled tuples.
Bare words in code are called symbols and are first class objects
Special characters in language are: (){}:, -- they cannot naturally be part of a bareword value.
Object method invocation taken care of at a higher level. '.' as a method signature not special, just part of symbol to parser.